[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aida"
version = "1.0.0"
description = "Advanced Intelligent Distributed Agent System"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "AIDA Development Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "agents", "automation", "llm", "multi-agent"]
requires-python = ">=3.11"

dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "click>=8.1.0",
    # Async and networking
    "asyncio>=3.4.3",
    "aiohttp>=3.9.0",
    "websockets>=12.0",
    "httpx>=0.25.0",
    # Configuration and serialization
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "msgpack>=1.0.7",
    "orjson>=3.9.0",
    # Security and sandboxing
    "dagger-io>=0.9.0",
    "cryptography>=41.0.0",
    "bcrypt>=4.1.0",
    # LLM providers
    "openai>=1.6.0",
    "anthropic>=0.8.0",
    "cohere>=4.37.0",
    "ollama>=0.1.7",
    # Utilities
    "structlog>=23.2.0",
    "tenacity>=8.2.0",
    "jinja2>=3.1.0",
    "pathspec>=0.11.0",
    "watchdog>=3.0.0",
    # Development and testing utilities
    "psutil>=5.9.0",
    "humanize>=4.8.0",
    "python-dotenv>=1.0.0",
    # OpenTelemetry for Dagger
    "opentelemetry-exporter-otlp-proto-grpc>=1.20.0",
    "pydantic-ai>=0.4.4",
    "opentelemetry-api>=1.35.0",
    "opentelemetry-sdk>=1.35.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    "ruff>=0.1.8",
    "ty>=0.0.1a15",
    "pre-commit>=4.2.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]

performance = [
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
    "cython>=3.0.0",
]

all = [
    "aida[dev,docs,performance]",
]

[project.urls]
Homepage = "https://github.com/aida-org/aida"
Documentation = "https://aida-docs.org"
Repository = "https://github.com/aida-org/aida"
"Bug Tracker" = "https://github.com/aida-org/aida/issues"

[project.scripts]
aida = "aida.cli.main:main"

[project.entry-points."aida.tools"]
execution = "aida.tools.execution:ExecutionTool"
thinking = "aida.tools.thinking:ThinkingTool"
files = "aida.tools.files:FileOperationsTool"
system = "aida.tools.system:SystemTool"
context = "aida.tools.context:ContextTool"
maintenance = "aida.tools.maintenance:MaintenanceTool"
project = "aida.tools.project:ProjectTool"
architecture = "aida.tools.architecture:ArchitectureTool"

[project.entry-points."aida.providers.llm"]
openai = "aida.providers.llm.openai:OpenAIProvider"
anthropic = "aida.providers.llm.anthropic:AnthropicProvider"
cohere = "aida.providers.llm.cohere:CohereProvider"
ollama = "aida.providers.llm.ollama:OllamaProvider"
vllm = "aida.providers.llm.vllm:VLLMProvider"

[project.entry-points."aida.agents"]
coordinator = "aida.agents.coordinator:CoordinatorAgent"
worker = "aida.agents.worker:WorkerAgent"

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "FBT", # flake8-boolean-trap
    "S",   # flake8-bandit
    "N",   # pep8-naming
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "S101",   # use of assert
    "S104",   # possible binding to all interfaces
    "FBT001", # boolean trap
    "FBT002", # boolean default arg
    "FBT003", # boolean positional arg
    "ARG001", # unused function argument
    "ARG002", # unused method argument
    "B904",   # raise without from
    "S108",   # temp file/dir usage
    "S602",   # subprocess popen with shell=True
    "S603",   # subprocess without shell equals true
    "S607",   # start process with partial path
    "S102",   # use of exec
    "S112",   # try-except-continue
    "E402",   # module level import not at top
    "N805",   # first argument of method should be named self (conflicts with Pydantic validators)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "ARG001", "ARG002", "FBT001", "FBT002", "S603", "S607"]
"smoke_test.py" = ["S102", "S603", "S607"]
"tests/scripts/smoke_test.py" = ["S102", "S603", "S607"]

[tool.ruff.lint.isort]
known-first-party = ["aida"]
force-sort-within-sections = true

[tool.ty.src]
exclude = ["aida/tests"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=aida",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["aida"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]
# Only report high severity issues
severity = "high"
# Don't create output file, only print to stdout
output_format = "screen"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["aida"]
force_sort_within_sections = true

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "D202", "D212", "D415"]
match-dir = "(?!tests|migrations|build|dist|\\.).*"

[dependency-groups]
dev = [
    "detect-secrets>=1.5.0",
    "ruff>=0.12.4",
    "safety>=3.2.9",
    "ty>=0.0.1a15",
]
